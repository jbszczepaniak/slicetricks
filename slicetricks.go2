package slicetricks

import "sort"

// Copy copies a slice.
// https://github.com/golang/go/wiki/SliceTricks#copy
func Copy(type T)(a []T) []T {
	b := make([]T, len(a))
	copy(b, a)
	return b
}

// Cut cuts elements.
// https://github.com/golang/go/wiki/SliceTricks#cut
func Cut(type T)(a []T, i, j int) []T {
	var zero T
	copy(a[i:], a[j:])
	for k, n := len(a)-j+i, len(a); k < n; k++ {
		a[k] = zero
	}
	a = a[:len(a)-j+i]
	return a
}

// Delete deletes element at index.
// https://github.com/golang/go/wiki/SliceTricks#delete
func Delete(type T)(a []T, i int) []T {
	var zero T
	copy(a[i:], a[i+1:])
	a[len(a)-1] = zero
	a = a[:len(a)-1]
	return a
}

// Filter fitlers slice based on the predicate.
// https://github.com/golang/go/wiki/SliceTricks#filtering-without-allocating
func Filter(type T)(a []T, f func(t T)bool) []T { 
	b := a[:0]
	for _, x := range a {
		if f(x) {
			b = append(b, x)
		}
	}
	return b
}

// Deduplicate deduplicates.
// https://github.com/golang/go/wiki/SliceTricks#in-place-deduplicate-comparable
func Deduplicate(type T ordered) (in []T) []T{
	sortSlice(in)

	j := 0
	for i := 1; i < len(in); i++ {
		if in[j] == in[i] {
			continue
		}
		j++
		// preserve the original data
		// in[i], in[j] = in[j], in[i]
		// only set what is required
		in[j] = in[i]
	}
	return in[:j+1]
}

// Batch batches.
// https://github.com/golang/go/wiki/SliceTricks#batching-with-minimal-allocation
func Batch(type T)(in []T, size int) [][]T {
	batches := make([][]T, 0, (len(in) + size - 1) / size)

	for size < len(in) {
		in, batches = in[size:], append(batches, in[0:size:size])
	}
	batches = append(batches, in)
	return batches
}

// MoveToFront moves to front.
// https://github.com/golang/go/wiki/SliceTricks#move-to-front-or-append-if-not-present-in-place
func MoveToFront(type T comparable)(needle T, haystack []T) []T {
	if len(haystack) == 0 || haystack[0] == needle {
		return haystack
	}
	var prev T
	for i, elem := range haystack {
		switch {
		case i == 0:
			haystack[0] = needle
			prev = elem
		case elem == needle:
			haystack[i] = prev
			return haystack
		default:
			haystack[i] = prev
			prev = elem
		}
	}
	return append(haystack, prev)
}

// SlidingWindow slides the window.
// https://github.com/golang/go/wiki/SliceTricks#sliding-window
func SlidingWindow(type T)(size int, input []T) [][]T {
	// returns the input slice as the first element
	if len(input) <= size {
		return [][]T{input}
	}

	// allocate slice at the precise size we need
	r := make([][]T, 0, len(input)-size+1)

	for i, j := 0, size; j <= len(input); i, j = i+1, j+1 {
		r = append(r, input[i:j])
	}

	return r
}

type ordered interface {
	type int, int8, int16, int32, int64,
		uint, uint8, uint16, uint32, uint64, uintptr,
		float32, float64,
		string
}

type orderedSlice(type elem ordered) []elem

func (s orderedSlice(elem)) Len() int           { return len(s) }
func (s orderedSlice(elem)) Less(i, j int) bool { return s[i] < s[j] }
func (s orderedSlice(elem)) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }

func sortSlice(type elem ordered)(s []elem) {
	sort.Sort(orderedSlice(elem)(s))
}